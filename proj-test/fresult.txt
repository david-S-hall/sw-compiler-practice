varsym var t1:int;

ident var t1:int;

colon var t1:int;

intsym var t1:int;

semicolon var t1:int;

varsym var t2:int;

ident var t2:int;

colon var t2:int;

intsym var t2:int;

semicolon var t2:int;

funcsym func gcd(a:int, b:int)->int{

ident func gcd(a:int, b:int)->int{

lparen func gcd(a:int, b:int)->int{

ident func gcd(a:int, b:int)->int{

colon func gcd(a:int, b:int)->int{

intsym func gcd(a:int, b:int)->int{

comma func gcd(a:int, b:int)->int{

ident func gcd(a:int, b:int)->int{

colon func gcd(a:int, b:int)->int{

intsym func gcd(a:int, b:int)->int{

rparen func gcd(a:int, b:int)->int{

pointer func gcd(a:int, b:int)->int{

intsym func gcd(a:int, b:int)->int{

lbrace func gcd(a:int, b:int)->int{

ifsym 	if a % b == 0{

ident 	if a % b == 0{

mod 	if a % b == 0{

ident 	if a % b == 0{

eql 	if a % b == 0{

number 	if a % b == 0{

lbrace 	if a % b == 0{

returnsym 		return b;

ident 		return b;

semicolon 		return b;

rbrace 	}else{

elsesym 	}else{

lbrace 	}else{

returnsym 		return gcd(b, a%b);

ident 		return gcd(b, a%b);

lparen 		return gcd(b, a%b);

ident 		return gcd(b, a%b);

comma 		return gcd(b, a%b);

ident 		return gcd(b, a%b);

mod 		return gcd(b, a%b);

ident 		return gcd(b, a%b);

rparen 		return gcd(b, a%b);

semicolon 		return gcd(b, a%b);

rbrace 	};

semicolon 	};

rbrace }

ident t1 = 84;

becomes t1 = 84;

number t1 = 84;

semicolon t1 = 84;

ident t2 = 36;

becomes t2 = 36;

number t2 = 36;

semicolon t2 = 36;

printsym print(gcd(t1, t2));
lparen print(gcd(t1, t2));
ident print(gcd(t1, t2));
lparen print(gcd(t1, t2));
ident print(gcd(t1, t2));
comma print(gcd(t1, t2));
ident print(gcd(t1, t2));
rparen print(gcd(t1, t2));
rparen print(gcd(t1, t2));
semicolon print(gcd(t1, t2));
12
