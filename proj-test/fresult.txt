varsym var i;

ident var i;

semicolon var i;

varsym var j;

ident var j;

semicolon var j;

varsym var sum;

ident var sum;

semicolon var sum;

funcsym func test(){

ident func test(){

lparen func test(){

rparen func test(){

lbrace func test(){

varsym   var a;

ident   var a;

semicolon   var a;

ident   a = 1;

becomes   a = 1;

number   a = 1;

semicolon   a = 1;

readsym   read(j);

lparen   read(j);

ident   read(j);

rparen   read(j);

semicolon   read(j);

ifsym   if a < j {

ident   if a < j {

lss   if a < j {

ident   if a < j {

lbrace   if a < j {

ident       a = a + 1;

becomes       a = a + 1;

ident       a = a + 1;

plus       a = a + 1;

number       a = a + 1;

semicolon       a = a + 1;

rbrace     };

semicolon     };

printsym   print(a);

lparen   print(a);

ident   print(a);

rparen   print(a);

semicolon   print(a);

rbrace }

callsym call test();

ident call test();

lparen call test();

rparen call test();

semicolon call test();

ident sum = 0;

becomes sum = 0;

number sum = 0;

semicolon sum = 0;

ident j = 1;

becomes j = 1;

number j = 1;

semicolon j = 1;

forsym for i in 1 ...j+10 {

ident for i in 1 ...j+10 {

insym for i in 1 ...j+10 {

number for i in 1 ...j+10 {

range for i in 1 ...j+10 {

ident for i in 1 ...j+10 {

plus for i in 1 ...j+10 {

number for i in 1 ...j+10 {

lbrace for i in 1 ...j+10 {

ident    sum = sum + 1;

becomes    sum = sum + 1;

ident    sum = sum + 1;

plus    sum = sum + 1;

number    sum = sum + 1;

semicolon    sum = sum + 1;

rbrace   };

semicolon   };

printsym print(sum);
lparen print(sum);
ident print(sum);
rparen print(sum);
semicolon print(sum);
2
11
